jsonData <- fromJSON(jsonFile)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
length(training$CompressiveStrength)
windows()
n<-length(training$CompressiveStrength)
idx<-1:n
qplot(x=idx, y=training$CompressiveStrength)
n <- length(training$CompressiveStrength)
idx <- 1:n
qplot(x=idx, y=CompressiveStrength, data=training)
names(training)
dim(training)
str(taining)
str(training)
library(Hmisc)
gFlyAsh <- cut2(training$CompressiveStrength, g=4)
qplot(x=idx, y=CompressiveStrength, data=training, color = gFlyAsh)
gFlyAsh <- cut2(training$FlyAsh, g=4)
qplot(x=idx, y=CompressiveStrength, data=training, color = gFlyAsh)
gAge <- cut2(training$Age, g=4)
qplot(x=idx, y=CompressiveStrength, data=training, color = gAge)
names(training)
featurePlot(x = training[,c("Cement", "BlastFurnaceSlag", FlyAsh)]),
y = training$CompressiveStrength, plot="pairs")
featurePlot(x = training[,c("Cement", "BlastFurnaceSlag", FlyAsh)]), y = training$CompressiveStrength, plot="pairs")
featurePlot(x = training[,c("Cement", "BlastFurnaceSlag", "FlyAsh")]),
y = training$CompressiveStrength, plot="pairs")
featurePlot(x = training[,c("Cement", "BlastFurnaceSlag", "FlyAsh")], y = training$CompressiveStrength, plot="pairs")
y = training$CompressiveStrength, plot="pairs")
featurePlot(x = training[,c("Cement", "BlastFurnaceSlag", "FlyAsh")], y = training$CompressiveStrength, plot="pairs")
names(training)
featurePlot(x = training[,c("Water", "Superplasticizer", "CoarseAggregate")], y = training$CompressiveStrength, plot="pairs")
featurePlot(x = training[,c("FineAggregate", "Age")], y = training$CompressiveStrength, plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(concrete)
dim(training)
names(training)
str(training)
plot(Superplasticizer)
plot(training$Superplasticizer)
plot(log(training$Superplasticizer + 1))
y<-training$Superplasticizer
y<-y+1
y<-log(y)
plot(y)
qplot(Superplasticizer, data = concrete, geom = "histogram")
n <- length(training$Superplasticizer)
idx < 1:n
qplot(x = idx, y =log(training$Superplasticizer + 1))
n <- length(training$Superplasticizer)
idx <- 1:n
qplot(x = idx, y =log(training$Superplasticizer + 1))
n <- length(training$Superplasticizer)
idx <- 1:n
y <- log(training$Superplasticizer + 1)
qplot(x = idx, y = y)
qplot(y, data = concrete, geom = "histogram")
qplot(y, geom = "histogram")
idx<- training$Superplasticizer < 0
length(idx)
length(training)
length(training$Superplasticizer)
length(idx == 1)
length(idx == 0)
idx[1:5]
isTRUE(idx)
isFALSE(idx)
isFALSE(idx)
qplot(x = idx, y = trainingSuperplasticizer)
qplot(x = idx, y = training$Superplasticizer)
n <- length(training$Superplasticizer)
idx <- 1:n
y <- log(training$Superplasticizer + 1)
qplot(x = idx, y = training$Superplasticizer)
sum(training$Superplasticizer < 0)
sum(training$Superplasticizer == 0)
sum(training$Superplasticizer < 0) / n
sum(training$Superplasticizer == 0) / n
nzv <- nearZeroVar(training, saveMetrics = TRUE)
nzv
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
dim(training)
AlzheimerDisease$diagnosis
ls
ls()
dim(diagnosis)
dim(predictor)
dim(predictors)
dim(AlzheimerDisease)
length(diagnosis)
dim(adData)
names(predictors)
names(training)[1]
training$diagnosis[1]
training$diagnosis[2]
training$diagnosis[333]
training$diagnosis[100]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
M <- abs(cor(training[,-1]))
diag(M) <- 0
str(training)
a<-training[,-1]
str(a)
cor(a)
cor(a*1.0)
M <- abs(cor(1.0*training[,-1]))
diag(M) <- 0
M <- abs(cor(as.numeric(training[,-1]))
)
C <- training[,-1]
C<-as.numeric(C)
C<-C*1.0
cor(C*1.0)
C <- training[,-1]
M <- abs(cor(C*1.0))
diag(M) <- 0
which(M >= 0.8, arr.ind = TRUE)
b<-which(M >= 0.8, arr.ind = TRUE)
dim(b)
names(adData)
help(prcomp)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
C <- training[,-1]
M <- abs(cor(C*1.0))
a<-prcomp(C)
b<- training[,2:4]
b<-as.numeric(b)
names(b)
head(b)
idx<-is.na(b)
dim(idx)
b(idx) <-0
b[idx]<-0
a<-prcomp(b)
summary(A)
summary(a)
idx <- is.na(training)
training[idx] <- 0
M<- training[,-1]
summary(prcomp(M))
a<-training[,2;]
a<-training[,2:]
a<-training[,-1]
dim(a)
dim(training)
M<- training[,-1]
idx <- is.na(M)
M[idx] <- 0
summary(prcomp(M))
prcomp(M)
sum(idx)
dim(M)
is.na(M)
idx<-is.na(M)
head(idx)
which(is.na(M))
which(is.na(M))
which(!is.na(M))
M[,1]
str(M)
head(M)
str(M)
a<-str(M)
a
str(M[,132])
names(M)
str(M[,130])
M<- training[,c(-1, -131)]
idx <- is.na(M)
M[idx] <- 0
summary(prcomp(M))
summary(prcomp(training, c(-1, -131)))
summary(prcomp(training[,c(-1, -131)]))
help(grep)
a<-names(training)
a
grep("IL",a)
b<-grep("IL",a)
a[b]
b<-grep("IL[]",a)
b<-grep(pattern="IL",a)
b
b<-grep(pattern="^IL",a)
b
a[b]
cols <- grep("^IL", names(training))
M <- training[,cols]
length(b)
dim(M)
summary(prcomp(M))
help(preProcess)
a<-preProcess(M, method="pca", thresh=0.8)
a
summary(a)
cols <- grep("^IL", names(training))
M <- training[,cols]
a <- preProcess(M, method="pca", thresh=0.8)
a
a$pcacomp
a$numComp
cols <- grep("^IL", names(training))
M <- training[,cols]
a <- preProcess(M, method="pca", thresh=0.8)
a
a$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
cols <- grep("^IL", names(training))
training = adData[ inTrain, cols]
testing = adData[-inTrain, cols]
length(cols)
dim(training)
cols
c(1, cols)
training = adData[ inTrain, c(1, cols)]
testing = adData[-inTrain, c(1, cols)]
dim(training)
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
ls
names(spam)
spam$type[1:5]
help(train)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
cols <- grep("^IL", names(training))
training = adData[ inTrain, c(1, cols)]
testing = adData[-inTrain, c(1, cols)]
modelFit2 <- train(training$diagnosis, method="glm", preProcess="pca", thresh=0.8, data=training)
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
modelFit2 <- train(training$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.8, data=training)
modelFit2 <- train(training$diagnosis ~ ., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
cols <- grep("^IL", names(training))
training = adData[ inTrain, c(1, cols)]
testing = adData[-inTrain, c(1, cols)]
preProc <- preProcess(training[,-1], method="pca", thresh=0.8)
trainPC <- predict(preProc, training[,-1])
dim(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
cols <- grep("^IL", names(training))
cols
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
cols <- grep("^IL", names(adData))
cols
length(cols)
training = adData[ inTrain, c(1, cols)]
testing = adData[-inTrain, c(1, cols)]
dim(training)
preProc <- preProcess(training[,-1], method="pca", thresh=0.8)
trainPC <- predict(preProc, training[,-1])
modelFit2 <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testing[,-1])
pred <- predict(modelFit2, testPC)
confusionMatrix(testing$diagnosis, pred)
preProc <- preProcess(training[,-1], method="pca", thresh=0.8)
trainPC <- predict(preProc, training[,-1])
modelFit2 <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testing[,-1])
pred <- predict(modelFit2, testPC)
confusionMatrix(testing$diagnosis, pred)
confusionMatrix(testing$diagnosis, pred)
M=confusionMatrix(testing$diagnosis, pred)
M$Accuracy
summary(M)
M$table
M$positive
str(M)
modelFit1 <- train(training$diagnosis ~ ., method="glm", data=training)
modelFit1 <- train(training$diagnosis ~ ., method="glm", data=training)
pred1 <- predict(modelFit1, testing[,-1])
confusionMatrix(testing$diagnosis, pred1)
help(order)
help(matline)
help(matlines)
setwd("E:/2015-03-02 Practical Machine Learning/Projects/Project due 2015-03-22")
rm(list=ls())
library(caret)
library(rattle)
library(rpart.plot)
trainingData <- read.csv("./pml-training.csv", header=TRUE, sep=",",
na.string=c("", " ", "NA", "#DIV/0!"))
testingData  <- read.csv("./pml-testing.csv", header=TRUE, sep=",",
na.string=c("", " ", "NA", "#DIV/0!"))
dim(trainingData)
dim(testingData)
nsv <- nearZeroVar(trainingData, saveMetric=TRUE)
sum(nsv$ZeroVar)
sum(nsv$nzv)
nzvColNames <- sort(rownames(nsv[nsv$nzv,]))
trainingSet <- trainingData[,!nsv$nzv]
testingSet  <- testingData[,!nsv$nzv]
dim(trainingSet)
dim(testingSet)
jcols <- grep("amplitude_|avg_|kurtosi_|ls_|max_|min_|skewness_|stddev_|var_", names(trainingSet))
trainingSet <- trainingSet[,-jcols]
testingSet  <- testingSet[,-jcols]
dim(trainingSet)
dim(testingSet)
colIdx <- which(colSums(is.na(trainingSet))/nrow(trainingSet) <= 0.20)
trainingSet <- trainingSet[, colIdx]
testingSet  <- testingSet[, colIdx]
dim(trainingSet)
dim(testingSet)
trainingSet <- trainingSet[,-1]
testingSet  <- testingSet[,-1]
trainingSet$classe <- as.factor(trainingSet$classe)
dim(trainingSet)
dim(testingSet)
sum(names(trainingSet) != names(testingSet))
set.seed(3245)
inTrain <- createDataPartition(trainingSet$classe, p = 0.6)[[1]]
myTraining <- trainingSet[inTrain,]
myTesting  <- trainingSet[-inTrain,]
modelFit_dt <- train(classe ~ ., data=myTraining, method="rpart")
pred_dt <- predict(modelFit_dt, newdata=myTesting)
confusionMatrix(myTesting$classe, pred_dt)
accuracy_dt <- sum(myTesting$classe == pred_dt)/length(myTesting$classe)
print(accuracy_dt)
print(modelFit_dt$finalModel)
modelFit_lda <- train(classe ~ ., data=myTraining, method="lda")
pred_lda <- predict(modelFit_lda, newdata=myTesting)
confusionMatrix(myTesting$classe, pred_lda)
accuracy_lda <- sum(myTesting$classe == pred_lda)/length(myTesting$classe)
print(accuracy_lda)
print(modelFit_lda$finalModel)
a<- predict(model_lda, newdata=testingSet)
a<- predict(modelFit_lda, newdata=testingSet)
print(a)
modelFit_rpart <- train(classe ~ ., data=myTraining, method="rpart")
pred_rpart <- predict(modelFit_rpart, newdata=myTesting)
confusionMatrix(myTesting$classe, pred_rpart)
accuracy_rpart <- sum(myTesting$classe == pred_rpart)/length(myTesting$classe)
print(accuracy_rpart)
print(modelFit_rpart$finalModel)
print(accuracy_rpart)
modelFit_gbm <- train(classe ~ ., data=myTraining, method="gbm", verbose=FALSE)
pred_gbm <- predict(modelFit_gbm, newdata=myTesting)
confusionMatrix(myTesting$classe, pred_gbm)
accuracy_gbm <- sum(myTesting$classe == pred_gbm)/length(myTesting$classe)
print(modelFit_gbm$finalModel)
print(accuracy_gbm)
modelFit_rf <- train(classe ~ ., data=myTraining, method="rf", prox=TRUE)
pred_rf <- predict(modelFit_rf, newdata=validation)
confusionMatrix(validation$classe, pred_rf)
accuracy_rf <- sum(validation$classe == pred_rf)/length(validation$classe)
print(modelFit_rf$finalModel)
print(accuracy_rf)
modelFit_rf
modelFit_rf <- train(classe ~ ., data=myTraining, method="rf")
pred_rf <- predict(modelFit_rf, newdata=validation)
pred_rf <- predict(modelFit_rf, newdata=myTesting)
confusionMatrix(myTesting$classe, pred_rf)
accuracy_rf <- sum(myTesting$classe == pred_rf)/length(validation$classe)
print(modelFit_rf$finalModel)
print(accuracy_rf)
accuracy_rf <- sum(myTesting$classe == pred_rf)/length(myTesting$classe)
print(modelFit_rf$finalModel)
print(accuracy_rf)
prediction_rpart <- predict(modelFit_rpart, newdata=testingSet)
print(prediction_rpart)
prediction_rf <- predict(modelFit_rf, newdata=testingSet)
print(prediction_rf)
prediction_gbm <- predict(modelFit_gbm, newdata=testingSet)
print(prediction_gbm)
prediction_lda <- predict(modelFit_lda, newdata=testingSet)
print(prediction_lda)
write_prediction = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
predictTesting<- function(){
pred_test <- predict(modelFit_gbm, newdata=testingSet)
print(pred_test)
ans <- as.vector(pred_test)
write_prediction(ans)
}
predictTesting
write_prediction(prediction_gbm)
rm(list=ls())
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modelFit_svm <- svm(CompressiveStrength ~ ., data=training)
pred_svm <- predict(modelFit_svm, testing[,-9])
accuracy_svm <- sum((testing$CompressiveStrength - pred_svm)^2)
mse <- sum((testing$CompressiveStrength - pred_svm)^2)
rmse <- sqrt(sum((testing$CompressiveStrength - pred_svm)^2))
print(rmse)
rm(list=ls())
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modelFit_svm <- svm(CompressiveStrength ~ ., data=training)
names(training)
names(testing)
pred_svm <- predict(modelFit_svm, testing[,-9])
accuracy_svm <- sum((testing$CompressiveStrength - pred_svm)^2)
mse <- sum((testing$CompressiveStrength - pred_svm)^2)
rmse <- sqrt(sum((testing$CompressiveStrength - pred_svm)^2))
print(accuracy_svm)
print(mse)
print(rmse)
confusionMatrix(testing$CompressiveStrength, pred_svm)
summary(modelFit_svm)
dim(testing)
head(testing$CompressiveStrength)
head(pred_svm)
length(pred_svm)
pred_svm[1:10]
a<-testing$CompressiveStrength - pred_svm
windows()
plot(a)
b<-a^2
sum(b)
sqrt(sum(b))
n <- length(pred_svm)
sqrt(sum(b)/n)
rm(list=ls())
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modelFit_svm <- svm(CompressiveStrength ~ ., data=training)
pred_svm <- predict(modelFit_svm, testing[,-9])
accuracy_svm <- sum((testing$CompressiveStrength - pred_svm)^2)
n <- length(pred_svm)
mse <- sum((testing$CompressiveStrength - pred_svm)^2)/n
rmse <- sqrt(sum((testing$CompressiveStrength - pred_svm)^2)/n)
print(accuracy_svm)
print(mse)
print(rmse)
